[gcode_macro END_PRINT]
gcode:
  SET_SKEW CLEAR=1 # Unload skew profil
  G91  ;Set to relative positioning
  G0 E-10 Z10 F1500  ;Retract filament
  G90  ;Set to absolute positioning
  G1 X0 Y280 F1500  ;Move XY to 0;
  TURN_OFF_HEATERS  ;Turn off heaters
  #M84  ;Disable motors
  M106 S0  ;Part cooling fan speed

[gcode_macro START_PRINT]
gcode:
    # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    SET_LED LED=extruder RED=1 GREEN=1 BLUE=1
    {% set BED_TEMP = params.BED_TEMP|default(55)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}    
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.3)|float %};0.3 layer hight
    {% set LINE_WIDTH = params.LINE_WIDTH|default(0.6)|float %};0.6 nozzle
    ;G28
    RESPOND TYPE=echo MSG="Initializing..."
    G21;set to mm
    M220 S100;set print speed to 100%
    M221 S100;set flow rate to 100%
    G92 E0;set extruder to 0
    G90 ;absolute positioning
    M83 ;extruder to relative mode
    RESPOND TYPE=echo MSG="Initialized"
    
    RESPOND TYPE=echo MSG="Preheating..."
    ;STATUS_BED_HEATING
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP};Set bed temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP};Preheat nozzle to the 3/4 off the final temp to prevent hoozing while bed mesh
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP};wait for bed temp
    RESPOND TYPE=echo MSG="Bed up to temp !"
    
    RESPOND TYPE=echo MSG="Bed mesh measurement..."
    ;STATUS_MESHING    
    G28;Homing again because of bed thermal expension
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    RESPOND TYPE=echo MSG="Bed mesh done"
    
    ;Purge lines
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP};set extruder temp
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP};wait for extruder temp
    RESPOND TYPE=echo MSG="Extruder up to temp !"
    RESPOND TYPE=echo MSG="Purging extruder..."
    Line_Purge
    RESPOND TYPE=echo MSG="Extruder purged"

    G1 X150 Y150 Z0.2
    SKEW_PROFILE LOAD=calilantern_skew_profile # Load the skew profil
    
    RESPOND TYPE=echo MSG="Printing !"

[delayed_gcode dry_filament_off_sequence]
# initial_duration: 0 # Mettre à 0 si vous ne voulez pas qu'il s'exécute par défaut au démarrage
gcode:
    {% if printer.configfile.settings.idle_timeout is defined %}
        {% set init_idle_timeout = printer.configfile.settings.idle_timeout.timeout|default(600)|int %}
    {% else %}
        {% set init_idle_timeout = 600 %}
    {% endif %}
    RESPOND PREFIX="DRY_FILAMENT" MSG="Temps de séchage finie."
    TURN_OFF_HEATERS
    SET_IDLE_TIMEOUT TIMEOUT={init_idle_timeout}
    RESPOND PREFIX="DRY_FILAMENT" MSG="idle_timeout restauré à {init_idle_timeout}s."
    # M84 ; Décommentez si vous voulez désactiver les steppers

[gcode_macro DRY_FILAMENT]
description: "Utiliser le lit pour déshumidifier une bobine de filament"
gcode:
    {% set duration_hr = params.H|default(0)|float %}
    {% set bed_temp = params.TEMP|default(0)|float %}
    {% set duration_sec = (duration_hr * 3600) | int %}

    # Récupération de l'idle_timeout initial.
    # Il sera utilisé par la séquence [delayed_gcode dry_filament_off_sequence]
    # Note : cette variable init_idle_timeout n'est pas directement passée à delayed_gcode.
    # [delayed_gcode dry_filament_off_sequence] récupérera la valeur actuelle au moment de son exécution.

    {% if duration_sec <= 0 %}
        {action_raise_error("Erreur DRY_FILAMENT: Durée invalide (H=%.2f)" % duration_hr)}
    {% endif %}
    {% if bed_temp <= 0 or bed_temp > 100 %}
        {action_raise_error("Erreur DRY_FILAMENT: Température invalide (TEMP=%.1f). Doit être >0 et <=100." % bed_temp)}
    {% endif %}

    DRY_FILAMENT" MSG="Initialisation pour le sécahge"
    SET_IDLE_TIMEOUT TIMEOUT={duration_sec + 120}

    RESPOND PREFIX="DRY_FILAMENT" MSG="Chauffage du lit à {bed_temp}°C."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp};Set bed temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp};wait for bed temp

    RESPOND PREFIX="DRY_FILAMENT" MSG="Température atteinte. Démarrage du minuteur de {duration_hr}H."

    # Programmer l'exécution de la séquence d'arrêt prédéfinie
    UPDATE_DELAYED_GCODE ID=dry_filament_off_sequence DURATION={duration_sec}

    RESPOND PREFIX="DRY_FILAMENT" MSG="Pour arrêtter le séchage : CANCEL_DRY_FILAMENT"

[gcode_macro STOP_DRY_FILAMENT]
description: "Arrêtte le séchage de filament en cours."
gcode:
    RESPOND PREFIX="DRY_FILAMENT" MSG="Arrêt du séchage de filament."
    # Force l'exécution immédiate de la séquence d'arrêt
    UPDATE_DELAYED_GCODE ID=dry_filament_off_sequence DURATION=1
    # Alternativement, pour juste annuler la tâche sans l'exécuter :
    # UPDATE_DELAYED_GCODE ID=dry_filament_off_sequence DURATION=0
    # TURN_OFF_HEATERS
    # {% if printer.configfile.settings.idle_timeout is defined %}
    #   SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout|default(600)|int}
    # {% else %}
    #   SET_IDLE_TIMEOUT TIMEOUT=600
    # {% endif %}
    # RESPOND PREFIX="DRY_FILAMENT" MSG="Chauffage arrêté et idle_timeout restauré."

[gcode_macro GET_POS]
gcode:
  GET_POSITION

[gcode_macro ForceMoinsZ25]
  gcode:
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-25 VELOCITY=25
[gcode_macro ForcePlusZ25]
  gcode:
    FORCE_MOVE STEPPER=stepper_z DISTANCE=25 VELOCITY=25

[save_variables]
filename: ~/printer_data/variables.cfg

[gcode_macro ABORT_PRINT]
gcode:
  CANCEL_PRINT

[gcode_macro PID_EXTRUDER]
gcode:
 M106 S255
 {% set TARGET_TEMP = params.TARGET_TEMP|default(220)|float %} 
 PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}

[gcode_macro PID_BED]
gcode:
 {%set TARGET_TEMP = params.TARGET_TEMP|default(50)|float %}
 PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}

[gcode_macro MATERIAL_PA]
gcode:
    {% set MATERIAL = params.MATERIAL|default("PLA")|string %}
    {% set TEXT ="Setting PA for " + MATERIAL %}
       {% if MATERIAL == "PLA" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.07
    {% elif MATERIAL == "PLA CF" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.065
    {% elif MATERIAL == "PETG" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.075
    {% elif MATERIAL == "TPU" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.0460
    {% elif MATERIAL == "ASA" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.065
    {% else %}
       {% set TEXT ="No PA value for " + MATERIAL %}
    {% endif %}
    _DISPLAYTEXT TEXT="{TEXT}">

[gcode_macro BED_TRAM]
  gcode:
    G28
    SCREWS_TILT_CALCULATE

[gcode_macro ENDSTOP_STATE]
  gcode:
    query_endstops

[gcode_macro PROBE_OFFSET]
  gcode:
    G28
    PROBE_CALIBRATE

[gcode_macro PROBE_TEST]
  gcode:
    PROBE_DOWN
    PROBE_UP

[gcode_macro SAVE_CFG]
gcode:
  SAVE_CONFIG

[gcode_macro BED_MESH]
gcode:
  G28
  BED_MESH_CALIBRATE PROFILE="default"

[gcode_macro PROBE_ACCURACY_TEST]
gcode:
  G28
  PROBE_ACCURACY

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}