[gcode_macro END_PRINT]
gcode:
  G91  ;Set to relative positioning
  G0 E-10 Z10 F1500  ;Retract filament
  G90  ;Set to absolute positioning
  G1 X0 Y280 F1500  ;Move XY to 0;
  TURN_OFF_HEATERS  ;Turn off heaters
  #M84  ;Disable motors
  M106 S0  ;Part cooling fan speed

[gcode_macro START_PRINT]
gcode:
    # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    SET_LED LED=extruder RED=1 GREEN=1 BLUE=1
    {% set BED_TEMP = params.BED_TEMP|default(55)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}    
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.3)|float %};0.3 layer hight
    {% set LINE_WIDTH = params.LINE_WIDTH|default(0.6)|float %};0.6 nozzle
    ;G28
    RESPOND TYPE=echo MSG="Initializing..."
    G21;set to mm
    M220 S100;set print speed to 100%
    M221 S100;set flow rate to 100%
    G92 E0;set extruder to 0
    G90 ;absolute positioning
    M83 ;extruder to relative mode
    RESPOND TYPE=echo MSG="Initialized"
    
    RESPOND TYPE=echo MSG="Preheating..."
    ;STATUS_BED_HEATING
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP};Set bed temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP};Preheat nozzle to the 3/4 off the final temp to prevent hoozing while bed mesh
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP};wait for bed temp
    RESPOND TYPE=echo MSG="Bed up to temp !"
    
    RESPOND TYPE=echo MSG="Bed mesh measurement..."
    ;STATUS_MESHING    
    G28;Homing again because of bed thermal expension
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    RESPOND TYPE=echo MSG="Bed mesh done"
    
    ;Purge lines
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP};set extruder temp
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP};wait for extruder temp
    RESPOND TYPE=echo MSG="Extruder up to temp !"
    RESPOND TYPE=echo MSG="Purging extruder..."
    Line_Purge
    RESPOND TYPE=echo MSG="Extruder purged"
    
    RESPOND TYPE=echo MSG="Printing !"
    ;STATUS_PRINTING

[gcode_macro DRY_FILAMENT]
description: "Utiliser le lit pour déshumidifier une bobine de filament"
gcode:
    {% set duration_hr = params.H|float %}
    {% set bed_temp = params.TEMP|float %}

    {% set duration_sec = duration_hr * 3600 %}
    {% set init_idle_timeout = printer.configfile.settings.idle_timeout.timeout|default(600)|int %} # Sauvegarde le idle_timeout pour le rétablir à la fin du séchage de la bobine

    {% if duration_sec <= 0 %}
        RESPOND PREFIX="DRY_FILAMENT" MSG="Erreur: Durée invalide (H={duration_hr})"
        CANCEL_MACRO
    {% endif %}
    {% if bed_temp <= 0 or bed_temp > 120 %}
        RESPOND PREFIX="DRY_FILAMENT" MSG="Erreur: Température invalide (TEMP={bed_temp})"
        CANCEL_MACRO
    {% endif %}
    RESPOND PREFIX="DRY_FILAMENT" MSG="Chauffage du lit à {bed_temp}°C pour {duration_hr}h"
    # Définie la nouvelle valeur du idle_timeout pour la durée du séchage
    SET_IDLE_TIMEOUT TIMEOUT={duration_sec + 60}
    # Chauffe du lit
    M140 S{bed_temp}
    M190 S{bed_temp}
    RESPOND PREFIX="DRY_FILAMENT" MSG="Démarrage du séchage pour {{ duration_hr }}h..."
    # Attente de la durée définie
    G4 S{duration_sec|int}
    # Arrêt de la chauffe
    TURN_OFF_HEATERS
    RESPOND PREFIX="DRY_FILAMENT" MSG="Séchage terminé. Refroidissement du lit..."
    # Restauration du timeout d'origine
    SET_IDLE_TIMEOUT TIMEOUT={init_idle_timeout}
    RESPOND PREFIX="DRY_FILAMENT" MSG="idle_timeout restauré à {init_idle_timeout}s"
    
[gcode_macro GET_POS]
gcode:
  GET_POSITION

[gcode_macro ForceMoinsZ25]
  gcode:
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-25 VELOCITY=25
[gcode_macro ForcePlusZ25]
  gcode:
    FORCE_MOVE STEPPER=stepper_z DISTANCE=25 VELOCITY=25
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
 SET_HEATER_TEMPERATURE HEATER=extruder TARGET=190;set extruder temp
 TEMPERATURE_WAIT SENSOR=extruder MINIMUM=190;wait for extruder temp
 M83
 G92 E0.0
 G1 E-100 F500
 G92 E0.0
 M82

[gcode_macro LOAD_FILAMENT]
gcode:
 SET_HEATER_TEMPERATURE HEATER=extruder TARGET=190;set extruder temp
 TEMPERATURE_WAIT SENSOR=extruder MINIMUM=190;wait for extruder temp
 M83
 G92 E0.0
 G1 E125 F150
 G1 E-35 F2400
 G92 E0.0
 M82
 TURN_OFF_HEATERS;Turn off heaters

[save_variables]
filename: ~/printer_data/variables.cfg

[gcode_macro ABORT_PRINT]
gcode:
  CANCEL_PRINT

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  # SET_FILAMENT_SENSOR SENSOR=RunoutSensor ENABLE=0
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

# [filaments]
# on_set_filament_gcode:
#     {action_respond_info("Filament Set. extruder: %s, T=%i, preset: %s, last_preset: %s" % (params.EXTRUDER, params.T, params.PRESET | string, params.LAST_PRESET | string))}
# on_clear_filament_gcode:
#     {action_respond_info("Filament Unset. extruder: %s, T=%i, last_preset: %s" % (params.EXTRUDER, params.T, params.LAST_PRESET | string))}

[gcode_macro PID_EXTRUDER]
gcode:
 M106 S255
 {% set TARGET_TEMP = params.TARGET_TEMP|default(220)|float %} 
 PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}

[gcode_macro PID_BED]
gcode:
 {%set TARGET_TEMP = params.TARGET_TEMP|default(50)|float %}
 PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}

[gcode_macro MATERIAL_PA]
gcode:
    {% set MATERIAL = params.MATERIAL|default("PLA")|string %}
    {% set TEXT ="Setting PA for " + MATERIAL %}
       {% if MATERIAL == "PLA" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.07
    {% elif MATERIAL == "PLA CF" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.065
    {% elif MATERIAL == "PETG" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.075
    {% elif MATERIAL == "TPU" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.0460
    {% elif MATERIAL == "ASA" %}
    SET_PRESSURE_ADVANCE ADVANCE=0.065
    {% else %}
       {% set TEXT ="No PA value for " + MATERIAL %}
    {% endif %}
    _DISPLAYTEXT TEXT="{TEXT}">

# [gcode_macro LOCK_Z_STEPPERS]
# gcode:
#   SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1

# [gcode_macro UN_LOCK_Z_STEPPERS]
# gcode:
#   SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0

[gcode_macro PROBE_OFFSET]
  gcode:
    G28
    PROBE_CALIBRATE

[gcode_macro BED_TRAM]
  gcode:
    G28
    SCREWS_TILT_CALCULATE

[gcode_macro ENDSTOP_STATE]
  gcode:
    query_endstops

[gcode_macro PROBE_TEST]
  gcode:
    PROBE_DOWN
    PROBE_UP

[gcode_macro SAVE_CFG]
gcode:
  SAVE_CONFIG

[gcode_macro BED_MESH]
gcode:
  G28
  BED_MESH_CALIBRATE PROFILE="default"

[gcode_macro PROBE_ACCURACY_TEST]
gcode:
  G28
  PROBE_ACCURACY

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _CLIENT_LINEAR_MOVE]
description: Linear move with save and restore of the gcode state
gcode:
  {% set x_move = "X" ~ params.X if params.X is defined else "" %}
  {% set y_move = "Y" ~ params.Y if params.Y is defined else "" %}
  {% set z_move = "Z" ~ params.Z if params.Z is defined else "" %}
  {% set e_move = "E" ~ params.E if params.E is defined else "" %}
  {% set rate = "F" ~ params.F if params.F is defined else "" %}
  {% set ABSOLUTE = params.ABSOLUTE | default(0) | int != 0 %}
  {% set ABSOLUTE_E = params.ABSOLUTE_E | default(0) | int != 0 %}
  SAVE_GCODE_STATE NAME=_client_movement
  {% if x_move or y_move or z_move %}
    G9{ 0 if ABSOLUTE else 1 }
  {% endif %}
  {% if e_move %}
    M8{ 2 if ABSOLUTE_E else 3 }
  {% endif %}
  G1 { x_move } { y_move } { z_move } { e_move } { rate }
  RESTORE_GCODE_STATE NAME=_client_movement